// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*GoodCreateResponse, error)
	GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error)
	GoodList(ctx context.Context, in *GoodListRequest, opts ...grpc.CallOption) (*GoodListResponse, error)
	GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*GoodUpdateResponse, error)
	GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*GoodDeleteResponse, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*GoodCreateResponse, error) {
	out := new(GoodCreateResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.Catalog/GoodCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error) {
	out := new(GoodGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.Catalog/GoodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodList(ctx context.Context, in *GoodListRequest, opts ...grpc.CallOption) (*GoodListResponse, error) {
	out := new(GoodListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.Catalog/GoodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*GoodUpdateResponse, error) {
	out := new(GoodUpdateResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.Catalog/GoodUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*GoodDeleteResponse, error) {
	out := new(GoodDeleteResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.Catalog/GoodDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GoodCreate(context.Context, *GoodCreateRequest) (*GoodCreateResponse, error)
	GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error)
	GoodList(context.Context, *GoodListRequest) (*GoodListResponse, error)
	GoodUpdate(context.Context, *GoodUpdateRequest) (*GoodUpdateResponse, error)
	GoodDelete(context.Context, *GoodDeleteRequest) (*GoodDeleteResponse, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GoodCreate(context.Context, *GoodCreateRequest) (*GoodCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodCreate not implemented")
}
func (UnimplementedCatalogServer) GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodGet not implemented")
}
func (UnimplementedCatalogServer) GoodList(context.Context, *GoodListRequest) (*GoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodList not implemented")
}
func (UnimplementedCatalogServer) GoodUpdate(context.Context, *GoodUpdateRequest) (*GoodUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodUpdate not implemented")
}
func (UnimplementedCatalogServer) GoodDelete(context.Context, *GoodDeleteRequest) (*GoodDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodDelete not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GoodCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.Catalog/GoodCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodCreate(ctx, req.(*GoodCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.Catalog/GoodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodGet(ctx, req.(*GoodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.Catalog/GoodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodList(ctx, req.(*GoodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.Catalog/GoodUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodUpdate(ctx, req.(*GoodUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.Catalog/GoodDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodDelete(ctx, req.(*GoodDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.api.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodCreate",
			Handler:    _Catalog_GoodCreate_Handler,
		},
		{
			MethodName: "GoodGet",
			Handler:    _Catalog_GoodGet_Handler,
		},
		{
			MethodName: "GoodList",
			Handler:    _Catalog_GoodList_Handler,
		},
		{
			MethodName: "GoodUpdate",
			Handler:    _Catalog_GoodUpdate_Handler,
		},
		{
			MethodName: "GoodDelete",
			Handler:    _Catalog_GoodDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
